diff --git a/src/compiler/backend/riscv/code-generator-riscv.cc b/src/compiler/backend/riscv/code-generator-riscv.cc
index 63e2d1de90..31214895a8 100644
--- a/v8/src/compiler/backend/riscv/code-generator-riscv.cc
+++ b/v8/src/compiler/backend/riscv/code-generator-riscv.cc
@@ -1540,31 +1540,11 @@ CodeGenerator::CodeGenResult CodeGenerator::AssembleArchInstruction(
       __ FPUCanonicalizeNaN(i.OutputDoubleRegister(), i.InputDoubleRegister(0));
       break;
     case kRiscvCvtSD: {
-      Label done;
-      __ feq_d(kScratchReg, i.InputDoubleRegister(0), i.InputDoubleRegister(0));
-      __ fmv_x_d(kScratchReg2, i.InputDoubleRegister(0));
       __ fcvt_s_d(i.OutputDoubleRegister(), i.InputDoubleRegister(0));
-      __ Branch(&done, eq, kScratchReg, Operand(1));
-      __ And(kScratchReg2, kScratchReg2, Operand(0x8000000000000000));
-      __ srai(kScratchReg2, kScratchReg2, 32);
-      __ fmv_d_x(kScratchDoubleReg, kScratchReg2);
-      __ fsgnj_s(i.OutputDoubleRegister(), i.OutputDoubleRegister(),
-                 kScratchDoubleReg);
-      __ bind(&done);
       break;
     }
     case kRiscvCvtDS: {
-      Label done;
-      __ feq_s(kScratchReg, i.InputDoubleRegister(0), i.InputDoubleRegister(0));
-      __ fmv_x_d(kScratchReg2, i.InputDoubleRegister(0));
       __ fcvt_d_s(i.OutputDoubleRegister(), i.InputSingleRegister(0));
-      __ Branch(&done, eq, kScratchReg, Operand(1));
-      __ And(kScratchReg2, kScratchReg2, Operand(0x80000000));
-      __ slli(kScratchReg2, kScratchReg2, 32);
-      __ fmv_d_x(kScratchDoubleReg, kScratchReg2);
-      __ fsgnj_d(i.OutputDoubleRegister(), i.OutputDoubleRegister(),
-                 kScratchDoubleReg);
-      __ bind(&done);
       break;
     }
     case kRiscvCvtDW: {
diff --git a/src/compiler/backend/riscv/instruction-selector-riscv.h b/src/compiler/backend/riscv/instruction-selector-riscv.h
index 91e79b2e1d..0e5d44651d 100644
--- a/v8/src/compiler/backend/riscv/instruction-selector-riscv.h
+++ b/v8/src/compiler/backend/riscv/instruction-selector-riscv.h
@@ -277,15 +277,19 @@ static void VisitBinop(InstructionSelectorT<Adapter>* selector, Node* node,
 }
 
 template <typename Adapter>
-void InstructionSelectorT<Adapter>::VisitStackSlot(Node* node) {
-  StackSlotRepresentation rep = StackSlotRepresentationOf(node->op());
-  int alignment = rep.alignment();
-  int slot = frame_->AllocateSpillSlot(rep.size(), alignment);
-  OperandGenerator g(this);
-
-  Emit(kArchStackSlot, g.DefineAsRegister(node),
-       sequence()->AddImmediate(Constant(slot)),
-       sequence()->AddImmediate(Constant(alignment)), 0, nullptr);
+void InstructionSelectorT<Adapter>::VisitStackSlot(node_t node) {
+  if constexpr (Adapter::IsTurboshaft) {
+    UNIMPLEMENTED();
+  } else {
+    StackSlotRepresentation rep = StackSlotRepresentationOf(node->op());
+    int alignment = rep.alignment();
+    int slot = frame_->AllocateSpillSlot(rep.size(), alignment);
+    OperandGenerator g(this);
+
+    Emit(kArchStackSlot, g.DefineAsRegister(node),
+         sequence()->AddImmediate(Constant(slot)),
+         sequence()->AddImmediate(Constant(alignment)), 0, nullptr);
+  }
 }
 
 template <typename Adapter>
diff --git a/src/compiler/backend/riscv/instruction-selector-riscv32.cc b/src/compiler/backend/riscv/instruction-selector-riscv32.cc
index 727605d1f1..abafd91067 100644
--- a/v8/src/compiler/backend/riscv/instruction-selector-riscv32.cc
+++ b/v8/src/compiler/backend/riscv/instruction-selector-riscv32.cc
@@ -206,6 +206,7 @@ void InstructionSelectorT<Adapter>::VisitLoad(node_t node) {
       case MachineRepresentation::kWord64:
       case MachineRepresentation::kNone:
       case MachineRepresentation::kSimd256:  // Fall through.
+      case MachineRepresentation::kIndirectPointer:
         UNREACHABLE();
     }
 
@@ -283,6 +284,7 @@ void InstructionSelectorT<TurbofanAdapter>::VisitStore(Node* node) {
       case MachineRepresentation::kNone:
       case MachineRepresentation::kWord64:
       case MachineRepresentation::kSimd256:  // Fall through.
+      case MachineRepresentation::kIndirectPointer:
         UNREACHABLE();
     }
 
@@ -824,6 +826,7 @@ void InstructionSelectorT<Adapter>::VisitUnalignedLoad(Node* node) {
     case MachineRepresentation::kMapWord:            // Fall through.
     case MachineRepresentation::kWord64:
     case MachineRepresentation::kNone:
+    case MachineRepresentation::kIndirectPointer:
       UNREACHABLE();
   }
 
@@ -879,6 +882,7 @@ void InstructionSelectorT<Adapter>::VisitUnalignedStore(Node* node) {
     case MachineRepresentation::kMapWord:  // Fall through.
     case MachineRepresentation::kNone:
     case MachineRepresentation::kWord64:
+    case MachineRepresentation::kIndirectPointer:
       UNREACHABLE();
   }
 
