diff --git a/ui/gl/init/gl_display_initializer.cc b/ui/gl/init/gl_display_initializer.cc
index 57b29339bb3e3..93ae677b5f8fe 100644
--- a/ui/gl/init/gl_display_initializer.cc
+++ b/ui/gl/init/gl_display_initializer.cc
@@ -28,7 +28,7 @@ void GetEGLInitDisplays(bool supports_angle_d3d,
                         bool supports_angle_null,
                         bool supports_angle_vulkan,
                         bool supports_angle_swiftshader,
-                        bool supports_angle_opengl_egl,
+                        bool supports_angle_egl,
                         bool supports_angle_metal,
                         const base::CommandLine* command_line,
                         std::vector<DisplayType>* init_displays) {
@@ -43,6 +43,11 @@ void GetEGLInitDisplays(bool supports_angle_d3d,
       base::FeatureList::IsEnabled(features::kDefaultANGLEMetal);
   bool default_angle_vulkan = features::IsDefaultANGLEVulkan();
 
+  // HACK: Try to use OpenGL ES first
+  AddInitDisplay(init_displays, ANGLE_OPENGLES_EGL);
+  AddInitDisplay(init_displays, ANGLE_OPENGLES);
+  AddInitDisplay(init_displays, ANGLE_OPENGLES_NULL);
+
   // If we're already requesting software GL, make sure we don't fallback to the
   // GPU
   bool force_software_gl =
@@ -122,10 +127,10 @@ void GetEGLInitDisplays(bool supports_angle_d3d,
       } else if (requested_renderer == kANGLEImplementationOpenGLESNULLName) {
         AddInitDisplay(init_displays, ANGLE_OPENGLES_NULL);
       } else if (requested_renderer == kANGLEImplementationOpenGLEGLName &&
-                 supports_angle_opengl_egl) {
+                 supports_angle_egl) {
         AddInitDisplay(init_displays, ANGLE_OPENGL_EGL);
       } else if (requested_renderer == kANGLEImplementationOpenGLESEGLName &&
-                 supports_angle_opengl_egl) {
+                 supports_angle_egl) {
         AddInitDisplay(init_displays, ANGLE_OPENGLES_EGL);
       }
     }
@@ -176,13 +181,13 @@ void GetEGLInitDisplaysForTesting(bool supports_angle_d3d,  // IN-TEST
                                   bool supports_angle_null,
                                   bool supports_angle_vulkan,
                                   bool supports_angle_swiftshader,
-                                  bool supports_angle_opengl_egl,
+                                  bool supports_angle_egl,
                                   bool supports_angle_metal,
                                   const base::CommandLine* command_line,
                                   std::vector<DisplayType>* init_displays) {
   GetEGLInitDisplays(supports_angle_d3d, supports_angle_opengl,
                      supports_angle_null, supports_angle_vulkan,
-                     supports_angle_swiftshader, supports_angle_opengl_egl,
+                     supports_angle_swiftshader, supports_angle_egl,
                      supports_angle_metal, command_line, init_displays);
 }
 
@@ -196,7 +201,7 @@ void GetDisplayInitializationParams(bool* supports_angle,
   bool supports_angle_null = false;
   bool supports_angle_vulkan = false;
   bool supports_angle_swiftshader = false;
-  bool supports_angle_opengl_egl = false;
+  bool supports_angle_egl = false;
   bool supports_angle_metal = false;
   // Check for availability of ANGLE extensions.
   if (g_driver_egl.client_ext.b_EGL_ANGLE_platform_angle) {
@@ -209,8 +214,6 @@ void GetDisplayInitializationParams(bool* supports_angle,
     supports_angle_opengl =
         g_driver_egl.client_ext.b_EGL_ANGLE_platform_angle_opengl &&
         (gl::GLImplementationParts(gl::ANGLEImplementation::kOpenGL)
-             .IsAllowed(allowed_impls) ||
-         gl::GLImplementationParts(gl::ANGLEImplementation::kOpenGLES)
              .IsAllowed(allowed_impls));
     supports_angle_null =
         g_driver_egl.client_ext.b_EGL_ANGLE_platform_angle_null;
@@ -223,7 +226,7 @@ void GetDisplayInitializationParams(bool* supports_angle,
             .b_EGL_ANGLE_platform_angle_device_type_swiftshader &&
         gl::GLImplementationParts(gl::ANGLEImplementation::kSwiftShader)
             .IsAllowed(allowed_impls);
-    supports_angle_opengl_egl =
+    supports_angle_egl =
         g_driver_egl.client_ext
             .b_EGL_ANGLE_platform_angle_device_type_egl_angle;
     supports_angle_metal =
@@ -239,7 +242,7 @@ void GetDisplayInitializationParams(bool* supports_angle,
   base::CommandLine* command_line = base::CommandLine::ForCurrentProcess();
   GetEGLInitDisplays(supports_angle_d3d, supports_angle_opengl,
                      supports_angle_null, supports_angle_vulkan,
-                     supports_angle_swiftshader, supports_angle_opengl_egl,
+                     supports_angle_swiftshader, supports_angle_egl,
                      supports_angle_metal, command_line, init_displays);
 }
 
diff --git a/ui/gl/init/gl_display_initializer.h b/ui/gl/init/gl_display_initializer.h
index e56c2ea5e291d..96d8ae150023f 100644
--- a/ui/gl/init/gl_display_initializer.h
+++ b/ui/gl/init/gl_display_initializer.h
@@ -22,7 +22,7 @@ GL_INIT_EXPORT void GetEGLInitDisplaysForTesting(
     bool supports_angle_null,
     bool supports_angle_vulkan,
     bool supports_angle_swiftshader,
-    bool supports_angle_opengl_egl,
+    bool supports_angle_egl,
     bool supports_angle_metal,
     const base::CommandLine* command_line,
     std::vector<DisplayType>* init_displays);
